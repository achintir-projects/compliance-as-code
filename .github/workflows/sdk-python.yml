name: Python SDK

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'sdks/python/**'
  pull_request:
    branches: [ main ]
    paths: 
      - 'sdks/python/**'

jobs:
  test-python:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('sdks/python/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov black flake8 mypy
        cd sdks/python
        pip install -e .
        
    - name: Lint with flake8
      run: |
        cd sdks/python
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Format check with black
      run: |
        cd sdks/python
        black --check .
        
    - name: Type check with mypy
      run: |
        cd sdks/python
        mypy glassbox/
        
    - name: Test with pytest
      run: |
        cd sdks/python
        pytest --cov=glassbox --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./sdks/python/coverage.xml
        flags: python
        name: codecov-umbrella
        
    - name: Build package
      run: |
        cd sdks/python
        python setup.py sdist bdist_wheel
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-sdk-build-${{ matrix.os }}-${{ matrix.python-version }}
        path: sdks/python/dist/

  publish-python:
    needs: test-python
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        cd sdks/python
        python -m build
        
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        cd sdks/python
        twine upload dist/*
